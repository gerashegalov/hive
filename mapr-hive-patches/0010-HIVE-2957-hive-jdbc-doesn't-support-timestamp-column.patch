 hive/release-0.9.0/data/files/datatypes.txt            |  6 +++---
 .../org/apache/hadoop/hive/jdbc/HiveBaseResultSet.java | 14 ++++++++++++--
 .../apache/hadoop/hive/jdbc/HivePreparedStatement.java |  3 +--
 .../apache/hadoop/hive/jdbc/HiveResultSetMetaData.java |  3 ++-
 .../java/org/apache/hadoop/hive/jdbc/JdbcColumn.java   |  7 ++++++-
 .../src/java/org/apache/hadoop/hive/jdbc/Utils.java    |  2 ++
 .../org/apache/hadoop/hive/jdbc/TestJdbcDriver.java    | 18 +++++++++++++++---
 7 files changed, 41 insertions(+), 12 deletions(-)

diff --git a/hive/release-0.9.0/data/files/datatypes.txt b/hive/release-0.9.0/data/files/datatypes.txt
index 187449d..87e0573 100644
--- a/hive/release-0.9.0/data/files/datatypes.txt
+++ b/hive/release-0.9.0/data/files/datatypes.txt
@@ -1,3 +1,3 @@
-\N\N\N\N\N\N\N\N\N\N\N\N\N\N\N\N
--1false-1.1\N\N\N-1-1-1.0-1\N\N
-1true1.11121x2ykva92.2111.01abcd1111213142212212x1abcd2
+\N\N\N\N\N\N\N\N\N\N\N\N\N\N\N\N\N
+-1false-1.1\N\N\N-1-1-1.0-1\N\N\N
+1true1.11121x2ykva92.2111.01abcd1111213142212212x1abcd22012-04-22 09:00:00.123456789
diff --git a/hive/release-0.9.0/jdbc/src/java/org/apache/hadoop/hive/jdbc/HiveBaseResultSet.java b/hive/release-0.9.0/jdbc/src/java/org/apache/hadoop/hive/jdbc/HiveBaseResultSet.java
index 7936c1e..5b5d4de 100644
--- a/hive/release-0.9.0/jdbc/src/java/org/apache/hadoop/hive/jdbc/HiveBaseResultSet.java
+++ b/hive/release-0.9.0/jdbc/src/java/org/apache/hadoop/hive/jdbc/HiveBaseResultSet.java
@@ -467,11 +467,21 @@ public abstract class HiveBaseResultSet implements ResultSet{
   }
 
   public Timestamp getTimestamp(int columnIndex) throws SQLException {
-    throw new SQLException("Method not supported");
+    Object obj = getObject(columnIndex);
+    if (obj == null) {
+      return null;
+    }
+    if (obj instanceof Timestamp) {
+      return (Timestamp) obj;
+    }
+    if (obj instanceof String) {
+      return Timestamp.valueOf((String)obj);
+    }
+    throw new SQLException("Illegal conversion");
   }
 
   public Timestamp getTimestamp(String columnName) throws SQLException {
-    throw new SQLException("Method not supported");
+    return getTimestamp(findColumn(columnName));
   }
 
   public Timestamp getTimestamp(int columnIndex, Calendar cal) throws SQLException {
diff --git a/hive/release-0.9.0/jdbc/src/java/org/apache/hadoop/hive/jdbc/HivePreparedStatement.java b/hive/release-0.9.0/jdbc/src/java/org/apache/hadoop/hive/jdbc/HivePreparedStatement.java
index b847d51..fae4e29 100644
--- a/hive/release-0.9.0/jdbc/src/java/org/apache/hadoop/hive/jdbc/HivePreparedStatement.java
+++ b/hive/release-0.9.0/jdbc/src/java/org/apache/hadoop/hive/jdbc/HivePreparedStatement.java
@@ -760,8 +760,7 @@ public class HivePreparedStatement implements PreparedStatement {
    */
 
   public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
-    // TODO Auto-generated method stub
-    throw new SQLException("Method not supported");
+    this.parameters.put(parameterIndex, x.toString());
   }
 
   /*
diff --git a/hive/release-0.9.0/jdbc/src/java/org/apache/hadoop/hive/jdbc/HiveResultSetMetaData.java b/hive/release-0.9.0/jdbc/src/java/org/apache/hadoop/hive/jdbc/HiveResultSetMetaData.java
index 1511a57..bc684f2 100644
--- a/hive/release-0.9.0/jdbc/src/java/org/apache/hadoop/hive/jdbc/HiveResultSetMetaData.java
+++ b/hive/release-0.9.0/jdbc/src/java/org/apache/hadoop/hive/jdbc/HiveResultSetMetaData.java
@@ -20,7 +20,6 @@ package org.apache.hadoop.hive.jdbc;
 
 import java.sql.ResultSetMetaData;
 import java.sql.SQLException;
-import java.sql.Types;
 import java.util.List;
 
 import org.apache.hadoop.hive.serde.Constants;
@@ -111,6 +110,8 @@ public class HiveResultSetMetaData implements java.sql.ResultSetMetaData {
       return Constants.INT_TYPE_NAME;
     } else if ("bigint".equalsIgnoreCase(type)) {
       return Constants.BIGINT_TYPE_NAME;
+    } else if ("timestamp".equalsIgnoreCase(type)) {
+      return Constants.TIMESTAMP_TYPE_NAME;
     } else if (type.startsWith("map<")) {
       return Constants.STRING_TYPE_NAME;
     } else if (type.startsWith("array<")) {
diff --git a/hive/release-0.9.0/jdbc/src/java/org/apache/hadoop/hive/jdbc/JdbcColumn.java b/hive/release-0.9.0/jdbc/src/java/org/apache/hadoop/hive/jdbc/JdbcColumn.java
index 5bffedc..c33b346 100644
--- a/hive/release-0.9.0/jdbc/src/java/org/apache/hadoop/hive/jdbc/JdbcColumn.java
+++ b/hive/release-0.9.0/jdbc/src/java/org/apache/hadoop/hive/jdbc/JdbcColumn.java
@@ -74,7 +74,8 @@ public class JdbcColumn {
     case Types.INTEGER:
     case Types.BIGINT:
       return columnPrecision(columnType) + 1; // allow +/-
-
+    case Types.TIMESTAMP:
+      return columnPrecision(columnType);
     // see http://download.oracle.com/javase/6/docs/api/constant-values.html#java.lang.Float.MAX_EXPONENT
     case Types.FLOAT:
       return 24; // e.g. -(17#).e-###
@@ -105,6 +106,8 @@ public class JdbcColumn {
       return 7;
     case Types.DOUBLE:
       return 15;
+    case Types.TIMESTAMP:
+      return 29;
     default:
       throw new SQLException("Invalid column type: " + columnType);
     }
@@ -124,6 +127,8 @@ public class JdbcColumn {
       return 7;
     case Types.DOUBLE:
       return 15;
+    case Types.TIMESTAMP:
+      return 9;
     default:
       throw new SQLException("Invalid column type: " + columnType);
     }
diff --git a/hive/release-0.9.0/jdbc/src/java/org/apache/hadoop/hive/jdbc/Utils.java b/hive/release-0.9.0/jdbc/src/java/org/apache/hadoop/hive/jdbc/Utils.java
index 02290ec..d620eb1 100644
--- a/hive/release-0.9.0/jdbc/src/java/org/apache/hadoop/hive/jdbc/Utils.java
+++ b/hive/release-0.9.0/jdbc/src/java/org/apache/hadoop/hive/jdbc/Utils.java
@@ -46,6 +46,8 @@ public class Utils {
       return Types.INTEGER;
     } else if ("bigint".equalsIgnoreCase(type)) {
       return Types.BIGINT;
+    } else if ("timestamp".equalsIgnoreCase(type)) {
+      return Types.TIMESTAMP;
     } else if (type.startsWith("map<")) {
       return Types.VARCHAR;
     } else if (type.startsWith("array<")) {
diff --git a/hive/release-0.9.0/jdbc/src/test/org/apache/hadoop/hive/jdbc/TestJdbcDriver.java b/hive/release-0.9.0/jdbc/src/test/org/apache/hadoop/hive/jdbc/TestJdbcDriver.java
index 0ed2878..5ad51c4 100644
--- a/hive/release-0.9.0/jdbc/src/test/org/apache/hadoop/hive/jdbc/TestJdbcDriver.java
+++ b/hive/release-0.9.0/jdbc/src/test/org/apache/hadoop/hive/jdbc/TestJdbcDriver.java
@@ -147,7 +147,8 @@ public class TestJdbcDriver extends TestCase {
         + " c13 array<array<string>>,"
         + " c14 map<int, map<int,int>>,"
         + " c15 struct<r:int,s:struct<a:int,b:string>>,"
-        + " c16 array<struct<m:map<string,string>,n:int>>) comment '"+dataTypeTableComment
+        + " c16 array<struct<m:map<string,string>,n:int>>,"
+        + " c17 timestamp) comment '"+dataTypeTableComment
             +"' partitioned by (dt STRING)");
     assertFalse(res.next());
 
@@ -378,6 +379,8 @@ public class TestJdbcDriver extends TestCase {
     assertEquals("{}", res.getString(14));
     assertEquals("[null, null]", res.getString(15));
     assertEquals("[]", res.getString(16));
+    assertEquals(null, res.getString(17));
+    assertEquals(null, res.getTimestamp(17));
 
     // row 3
     assertTrue(res.next());
@@ -397,6 +400,8 @@ public class TestJdbcDriver extends TestCase {
     assertEquals("{1={11=12, 13=14}, 2={21=22}}", res.getString(14));
     assertEquals("[1, [2, x]]", res.getString(15));
     assertEquals("[[{}, 1], [{c=d, a=b}, 2]]", res.getString(16));
+    assertEquals("2012-04-22 09:00:00.123456789", res.getString(17));
+    assertEquals("2012-04-22 09:00:00.123456789", res.getTimestamp(17).toString());
 
     // test getBoolean rules on non-boolean columns
     assertEquals(true, res.getBoolean(1));
@@ -794,13 +799,13 @@ public class TestJdbcDriver extends TestCase {
 
     ResultSet res = stmt.executeQuery(
         "select c1, c2, c3, c4, c5 as a, c6, c7, c8, c9, c10, c11, c12, " +
-        "c1*2, sentences(null, null, null) as b from " + dataTypeTableName + " limit 1");
+        "c1*2, sentences(null, null, null) as b, c17 from " + dataTypeTableName + " limit 1");
     ResultSetMetaData meta = res.getMetaData();
 
     ResultSet colRS = con.getMetaData().getColumns(null, null,
         dataTypeTableName.toLowerCase(), null);
 
-    assertEquals(14, meta.getColumnCount());
+    assertEquals(15, meta.getColumnCount());
 
     assertTrue(colRS.next());
 
@@ -996,6 +1001,13 @@ public class TestJdbcDriver extends TestCase {
     assertEquals(Integer.MAX_VALUE, meta.getPrecision(14));
     assertEquals(0, meta.getScale(14));
 
+    assertEquals("c17", meta.getColumnName(15));
+    assertEquals(Types.TIMESTAMP, meta.getColumnType(15));
+    assertEquals("timestamp", meta.getColumnTypeName(15));
+    assertEquals(29, meta.getColumnDisplaySize(15));
+    assertEquals(29, meta.getPrecision(15));
+    assertEquals(9, meta.getScale(15));
+
     for (int i = 1; i <= meta.getColumnCount(); i++) {
       assertFalse(meta.isAutoIncrement(i));
       assertFalse(meta.isCurrency(i));
