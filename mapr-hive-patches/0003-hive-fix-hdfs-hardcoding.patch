 .../common/src/java/org/apache/hadoop/hive/conf/HiveConf.java     | 2 +-
 .../src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java  | 2 +-
 .../ql/src/java/org/apache/hadoop/hive/ql/MapRedStats.java        | 8 ++++----
 .../ql/src/java/org/apache/hadoop/hive/ql/parse/EximUtil.java     | 2 +-
 .../org/apache/hadoop/hive/ql/parse/ExportSemanticAnalyzer.java   | 3 ++-
 .../org/apache/hadoop/hive/ql/parse/LoadSemanticAnalyzer.java     | 3 ++-
 .../src/java/org/apache/hadoop/hive/ql/session/SessionState.java  | 2 +-
 7 files changed, 12 insertions(+), 10 deletions(-)

diff --git a/hive/release-0.9.0/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java b/hive/release-0.9.0/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
index 422d29e..c7930d1 100644
--- a/hive/release-0.9.0/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
+++ b/hive/release-0.9.0/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
@@ -550,7 +550,7 @@ public class HiveConf extends Configuration {
 
     HIVE_INDEX_IGNORE_HDFS_LOC("hive.index.compact.file.ignore.hdfs", false),
 
-    HIVE_EXIM_URI_SCHEME_WL("hive.exim.uri.scheme.whitelist", "hdfs,pfile"),
+    HIVE_EXIM_URI_SCHEME_WL("hive.exim.uri.scheme.whitelist", "hdfs,pfile,maprfs"),
     // temporary variable for testing. This is added just to turn off this feature in case of a bug in
     // deployment. It has not been documented in hive-default.xml intentionally, this should be removed
     // once the feature is stable
diff --git a/hive/release-0.9.0/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java b/hive/release-0.9.0/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java
index b7bb7e3..8c18ae9 100644
--- a/hive/release-0.9.0/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java
+++ b/hive/release-0.9.0/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java
@@ -1746,7 +1746,7 @@ public class HiveMetaStore extends ThriftHiveMetastore {
         }
         // Allow only keys that start with hive.*, hdfs.*, mapred.* for security
         // i.e. don't allow access to db password
-        if (!Pattern.matches("(hive|hdfs|mapred).*", name)) {
+        if (!Pattern.matches("(hive|hdfs|mapred|maprfs|s3|s3n|mapreduce).*", name)) {
           throw new ConfigValSecurityException("For security reasons, the "
               + "config key " + name + " cannot be accessed");
         }
diff --git a/hive/release-0.9.0/ql/src/java/org/apache/hadoop/hive/ql/MapRedStats.java b/hive/release-0.9.0/ql/src/java/org/apache/hadoop/hive/ql/MapRedStats.java
index 8ba2b49..be4328d 100644
--- a/hive/release-0.9.0/ql/src/java/org/apache/hadoop/hive/ql/MapRedStats.java
+++ b/hive/release-0.9.0/ql/src/java/org/apache/hadoop/hive/ql/MapRedStats.java
@@ -111,17 +111,17 @@ public class MapRedStats {
 
     if (counters != null) {
       Counter hdfsReadCntr = counters.findCounter("FileSystemCounters",
-          "HDFS_BYTES_READ");
+          "MAPRFS_BYTES_READ");
       long hdfsRead;
       if (hdfsReadCntr != null && (hdfsRead = hdfsReadCntr.getValue()) >= 0) {
-        sb.append(" HDFS Read: " + hdfsRead);
+        sb.append(" MAPRFS Read: " + hdfsRead);
       }
 
       Counter hdfsWrittenCntr = counters.findCounter("FileSystemCounters",
-          "HDFS_BYTES_WRITTEN");
+          "MAPRFS_BYTES_WRITTEN");
       long hdfsWritten;
       if (hdfsWrittenCntr != null && (hdfsWritten = hdfsWrittenCntr.getValue()) >= 0) {
-        sb.append(" HDFS Write: " + hdfsWritten);
+        sb.append(" MAPRFS Write: " + hdfsWritten);
       }
     }
 
diff --git a/hive/release-0.9.0/ql/src/java/org/apache/hadoop/hive/ql/parse/EximUtil.java b/hive/release-0.9.0/ql/src/java/org/apache/hadoop/hive/ql/parse/EximUtil.java
index 265f14b..bc7c9ed 100644
--- a/hive/release-0.9.0/ql/src/java/org/apache/hadoop/hive/ql/parse/EximUtil.java
+++ b/hive/release-0.9.0/ql/src/java/org/apache/hadoop/hive/ql/parse/EximUtil.java
@@ -90,7 +90,7 @@ public class EximUtil {
         if (testMode) {
           scheme = "pfile";
         } else {
-          scheme = "hdfs";
+          scheme = "maprfs";
         }
       }
 
diff --git a/hive/release-0.9.0/ql/src/java/org/apache/hadoop/hive/ql/parse/ExportSemanticAnalyzer.java b/hive/release-0.9.0/ql/src/java/org/apache/hadoop/hive/ql/parse/ExportSemanticAnalyzer.java
index 918cf23..35abb67 100644
--- a/hive/release-0.9.0/ql/src/java/org/apache/hadoop/hive/ql/parse/ExportSemanticAnalyzer.java
+++ b/hive/release-0.9.0/ql/src/java/org/apache/hadoop/hive/ql/parse/ExportSemanticAnalyzer.java
@@ -130,7 +130,8 @@ public class ExportSemanticAnalyzer extends BaseSemanticAnalyzer {
       inputs.add(new ReadEntity(ts.tableHandle));
     }
     outputs.add(new WriteEntity(toURI.toString(),
-        toURI.getScheme().equals("hdfs") ? true : false));
+          (toURI.getScheme().equals("hdfs") || 
+           toURI.getScheme().equals("maprfs")) ? true : false));
   }
 
 }
diff --git a/hive/release-0.9.0/ql/src/java/org/apache/hadoop/hive/ql/parse/LoadSemanticAnalyzer.java b/hive/release-0.9.0/ql/src/java/org/apache/hadoop/hive/ql/parse/LoadSemanticAnalyzer.java
index 227327e..cd2ecf1 100644
--- a/hive/release-0.9.0/ql/src/java/org/apache/hadoop/hive/ql/parse/LoadSemanticAnalyzer.java
+++ b/hive/release-0.9.0/ql/src/java/org/apache/hadoop/hive/ql/parse/LoadSemanticAnalyzer.java
@@ -101,7 +101,8 @@ public class LoadSemanticAnalyzer extends BaseSemanticAnalyzer {
     }
 
     // if scheme is specified but not authority then use the default authority
-    if ((!fromScheme.equals("file")) && StringUtils.isEmpty(fromAuthority)) {
+    if ((fromScheme.equals("maprfs") || fromScheme.equals("hdfs"))
+        && StringUtils.isEmpty(fromAuthority)) {
       URI defaultURI = FileSystem.get(conf).getUri();
       fromAuthority = defaultURI.getAuthority();
     }
diff --git a/hive/release-0.9.0/ql/src/java/org/apache/hadoop/hive/ql/session/SessionState.java b/hive/release-0.9.0/ql/src/java/org/apache/hadoop/hive/ql/session/SessionState.java
index 8edfef8..d0e65be 100644
--- a/hive/release-0.9.0/ql/src/java/org/apache/hadoop/hive/ql/session/SessionState.java
+++ b/hive/release-0.9.0/ql/src/java/org/apache/hadoop/hive/ql/session/SessionState.java
@@ -594,7 +594,7 @@ public class SessionState {
    * are permissible for download as a resource.
    */
   public static String getMatchingSchemaAsRegex() {
-    String[] matchingSchema = {"s3", "s3n", "hdfs"};
+    String[] matchingSchema = {"s3", "s3n", "hdfs", "maprfs"};
     return StringUtils.join(matchingSchema, "|");
   }
 
